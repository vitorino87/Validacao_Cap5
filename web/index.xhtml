<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:f="http://xmlns.jcp.org/jsf/core">
    <h:head>
        <title>Facelet Title</title>
    </h:head>
    <h:body>
        <h:messages />
        Email: <h:outputText value="#{exemploMB.email}"/>
        <h:form>
            <h:inputText value="#{exemploMB.email}">
                <f:validateRegex pattern="^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,6})$"/>
                <!-- 
explicando o pattern com minhas palavras: 
colchetes([]) é o conteudo que será aceito. 
Mais (+) concatena os valores que serão aceitos. 
Barra e ponto (\.) significa que o caractere ponto (.) será obrigatório.
Asterisco com arroba (*@) significa que é obrigatório o @ com algum valor à esquerda
Asterisco com parenteses "*(" significa que o valor a direita é obrigatório
{2,6} significa que a string deve possuir de 2 a 6 caracteres.

fonte: https://www.w3schools.com/jsref/jsref_obj_regexp.asp
                            
Quantifier  Description              
n+          Matches any string that contains at least one n
n*          Matches any string that contains zero or more occurrences of n
n?          Matches any string that contains zero or one occurrences of n
n{X}        Matches any string that contains a sequence of X n's
n{X,Y}      Matches any string that contains a sequence of X to Y n's
n{X,}       Matches any string that contains a sequence of at least X n's
n$          Matches any string with n at the end of it
^n          Matches any string with n at the beginning of it
?=n         Matches any string that is followed by a specific string n
?!n         Matches any string that is not followed by a specific string n

Metacharacter	Description
.	Find a single character, except newline or line terminator
\w	Find a word character
\W	Find a non-word character
\d	Find a digit
\D	Find a non-digit character
\s	Find a whitespace character
\S	Find a non-whitespace character
\b	Find a match at the beginning/end of a word
\B	Find a match not at the beginning/end of a word
\0	Find a NUL character
\n	Find a new line character
\f	Find a form feed character
\r	Find a carriage return character
\t	Find a tab character
\v	Find a vertical tab character
\xxx	Find the character specified by an octal number xxx
\xdd	Find the character specified by a hexadecimal number dd
\uxxxx	Find the Unicode character specified by a hexadecimal number xxxx
                
Brackets
[abc]	Find any character between the brackets
[^abc]	Find any character NOT between the brackets
[0-9]	Find any character between the brackets (any digit)
[^0-9]	Find any character NOT between the brackets (any non-digit)
(x|y)	Find any of the alternatives specified
                -->
            </h:inputText>
            <br/>
            <h:outputLabel value="Idade: " for="idade"/>
            <h:inputText value="#{exemploMB.idade}" id="idade">
                <f:validateLongRange minimum="18" maximum="150"/>
            </h:inputText>
            <br/>
            
            <h:outputLabel value="Nota: " for="nota"/>
            <h:inputText value="#{exemploMB.nota}" id="nota" required="true">
                <f:validateDoubleRange minimum="0" maximum="10"/>
            </h:inputText>
            <br/>
            <h:outputLabel value="Testando Pattern do w3school" for="teste"/>
            <h:inputText value="#{exemploMB.teste}" id="teste">
                <f:validateRegex pattern=".{1,}"/>
            </h:inputText>
            
            <h:commandButton value="Atualizar"/>
        </h:form>
    </h:body>
</html>

